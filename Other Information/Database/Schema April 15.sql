-- our lockout table that controls global api access
create table public."Lockout" (
  code smallint generated by default as identity not null, --1 locked out, 0 not
  constraint Lockout_pkey primary key (code)
)

-- creates the table to store game information
create table public."Games" (
  game_id bigint generated by default as identity not null, --uses the steam id as the primary key
  name text not null, --stores the name for our human brains
  header_image text null, --stores the header images as text for us to display 
  platform smallint not null default '0'::smallint, --stores whether or not the game is available linux, macOS, or Windows by adding a score of 1,2, or 4 respectively. 7 is all 3
  metacritic_score integer null, --stores the metacritic score if one was given
  released date null, -- stores the date the game was released even if it is in the future
  price real null, --stores the price as a 2 digit decimal
  hltb_score numeric null, --stores "how long to beat" the game
  description text null, --stores a short description of the game
  last_updated bigint null, --when we last updated the game information
  boil_score real null, --this is our WIP boil score to recommend
  recommendations text null default 'depreciated'::text, --depreciated, please use the recommendations table
  constraint GAMES_pkey primary key (game_id)
)

--Our table that gets used for background populating games in
create table public."Buffer_Games" (
  game_id bigint generated by default as identity not null,
  constraint Buffer_pkey primary key (game_id)
)

-- create the current iteration of the tracked user profiles
create table public."Profiles" (
  steam_id bigint generated by default as identity not null,  --use the steam id as a primary key
  last_updated timestamp with time zone not null default now(), --shows the last time the profile was updated
  username text null,  --stores the steam username for us to display
  avatar_hash text null, --stores the hash steam uses to display profile images so we can display it
  preference smallint not null default '0'::smallint, -- light or dark mode (0 is dark mode)
  created_at timestamp with time zone not null default now(), -- shows when the account was created
  constraint Profiles_pkey primary key (steam_id)
)

--our table to check profiles in background
create table public."Buffer_Profiles" (
  steam_id bigint not null,
  constraint Buffer_Profiles_pkey primary key (steam_id),
  constraint Buffer_Profiles_steam_id_key unique (steam_id)
)

--our game genres
create table public."Genres" (
  id integer not null, --the ID that steam gives as a primary key
  description character varying not null, --the english text that steam gives
  constraint genres_pkey primary key (id)
)

--our game categories
create table public."Catagories" (
  id integer generated by default as identity not null, --the ID that steam gives as a primary key
  description text not null, --the english text that steam gives
  constraint Catagories_pkey primary key (id)
)

--our game developers
create table public."Developers" (
  developers text not null, --their plain name
  constraint Developers_pkey primary key (developers)
)

--our game publishers
create table public."Publishers" (
  publisher text not null, -- their plain name
  constraint Publishers_pkey primary key (publisher)
)

--our DLC information
create table public."DLCs" (
  dlc_id bigint generated by default as identity not null, --the DLC id steam gives as our primary key
  main_game bigint null, --references the main game and if you delete the main game this gets deleted
  constraint dlcs_pkey primary key (dlc_id),
  constraint DLCs_main_game_fkey foreign KEY (main_game) references "Games" (game_id) on delete CASCADE
)

-- table that shows what catagories do our games have?
create table public."Game_Catagory" (
  catagory integer not null, --this is 1 catagory
  game_id bigint not null, --this is the 1 game
  constraint Game_Catagory_catagory_fkey foreign KEY (catagory) references "Catagories" (id),
  constraint Game_Catagory_game_id_fkey foreign KEY (game_id) references "Games" (game_id) on delete CASCADE --They get deleted if you delete either but we can querie all games with a catagory
)

create table public."Game_Genres" (
  games bigint not null,
  genres integer not null,
  constraint Game_Genres_games_fkey foreign KEY (games) references "Games" (game_id) on delete CASCADE, --the same as genre
  constraint Game_Genres_genres_fkey foreign KEY (genres) references "Genres" (id) on delete CASCADE --but with catagories
)

create table public."Game_Developers" (
  developer text not null,
  game_id bigint not null,
  constraint Game_Developers_developer_fkey foreign KEY (developer) references "Developers" (developers), --same as the above but developers
  constraint Game_Developers_game_id_fkey foreign KEY (game_id) references "Games" (game_id) on delete CASCADE
)

-- The same as above but using publishers
create table public."Game_Publishers" (
  game_id bigint not null,
  publisher text not null,
  constraint Game_Publishers_game_id_fkey foreign KEY (game_id) references "Games" (game_id) on delete CASCADE,
  constraint Game_Publishers_publisher_fkey foreign KEY (publisher) references "Publishers" (publisher) on delete CASCADE
)

--work in progress for user games relations
create table User_Games ( 
	game_id int not null references Games (games_id) on delete cascade, --store the game id, if game is deleted delete record
	steam_id bigint not null references Profiles (steam_id) on delete cascade, --store user id, if user is deleted delete record
	time_played bigint, --how much time user has played the game
	last_played timestamp with time zone, --last time the user played the game
	last_updated timestamp with time zone default now(), --last time we checked this game and user combo
	primary key (game_id, steam_id) --set a dual primary key
);

--this table lets us have what kind of relationship different users have between each other
create table public."Status" (
  status_code smallint generated by default as identity not null,
  status_name text not null,
  constraint Status_pkey primary key (status_code)
)

--how we are storing user relations
create table public."User_Relations" (
  user1 bigint generated by default as identity not null, --this is the lower ID user
  user2 bigint not null, --this is the higher
  status smallint null, --this is the relationship type
  status_since timestamp with time zone null default now(), --how long it has been like this
  constraint User_Relations_pkey primary key (user1),
  constraint User_Relations_status_fkey foreign KEY (status) references "Status" (status_code),
  constraint User_Relations_user1_fkey foreign KEY (user1) references "Profiles" (steam_id) on delete CASCADE,
  constraint User_Relations_user2_fkey foreign KEY (user2) references "Profiles" (steam_id) on delete CASCADE
)

--how we track what games users own
create table public."User_Games" (
  game_id bigint generated by default as identity not null, --User
  steam_id bigint not null, -- their game
  total_played bigint null, -- how long they have played it
  last_updated timestamp with time zone null default now(), --when we last updated how long theyve played it
  last_2_weeks bigint null, --how long they have played in the last 2 weeks
  recency smallint not null default '0'::smallint, --is it one of their 3 most recently played games?
  constraint User_Games_pkey primary key (game_id, steam_id),
  constraint User_Games_game_id_fkey foreign KEY (game_id) references "Games" (game_id) on delete CASCADE,
  constraint User_Games_steam_id_fkey foreign KEY (steam_id) references "Profiles" (steam_id) on delete CASCADE
)

-- This table holds our recommendation scores for each game
create table public."Game_Recommendations" (
  game_id bigint generated by default as identity not null, -- our game IDs
  description text not null,
  total bigint null, -- total recommendations 
  positive bigint null, -- good recommendations
  negative bigint null, --bad recomendations (dont recommend)
  constraint Game_Recommendations_pkey primary key (game_id),
  constraint Game_Recommendations_game_id_key unique (game_id),
  constraint Game_Recommendations_game_id_fkey foreign KEY (game_id) references "Games" (game_id) on delete CASCADE
); -- the end
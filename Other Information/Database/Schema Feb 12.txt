-- create the current iteration of the tracked user profiles
create table Profiles (
	steam_id bigint not null primary key, --use the steam id as a primary key
	last_updatedupdated timestamp with time zone default now(), --shows the last time the profile was updated
	username text, --stores the steam username for us to display
	avatar_hash text, --stores the hash steam uses to display profile images so we can display it
	created_at timestamp with time zone default now() --when the account was created for us
);

-- creates the table to store game information
create table Games (
	games_id int not null primary key, --uses the steam id as the primary key
	name text not null, --stores the name for our human brains
	header_image text, --stores the header images as text for us to display 
	platform int, --stores whether or not the game is available linux, macOS, or Windows by adding a score of 1,2, or 4 respectively. 7 is all 3
	metacritic_score int, --stores the metacritic score if one was given
	released date, -- stores the date the game was released even if it is in the future
	price float, --stores the price as a 2 digit decimal in USD
	hltb_score float, --stores "how long to beat" the game
	recommendations int, --stores how many people recommend the game on steam
	description text, --stores a short description of the 
	last_updated timestamp with time zone default now() --when we last updated the game information
);

--our game genres
create table Genres (
	id int not null primary key, --the ID that steam gives as a primary key
	description text --the english text that steam gives
);

--our game categories
create table Categories (
	id int not null primary key, --the ID that steam gives as a primary key
	description text--the english text that steam gives
);

--our game developers
create table Developers (
	developers text not null primary key --their plain name
);

--our game publishers
create table Publishers (
	publishers text not null primary key --their plain name
);

--our DLC information
create table DLCs (
	dlc_id int not null primary key, --the DLC id steam gives
	main_game int not null references Games (games_id) on delete cascade --references the main game and if you delete the main game this gets deleted
);

--what catagories do our games have?
create table Game_Category (
	game_id int not null references Games (games_id) on delete cascade, --this is the 1 game 
	category_id int not null references Categories (id) on delete cascade, --this is 1 catagory. They get deleted if you delete either but we can querie all games with a catagory
	primary key (game_id, category_id) --double primary key
);

create table Game_Genre (
	game_id int not null references Games (games_id) on delete cascade, --the same as genre
	genre_id int not null references Genres (id) on delete cascade, --but with catagories
	primary key (game_id, genre_id)
);

create table Game_Developers (
	game_id int not null references Games (games_id) on delete cascade, --same as the above but developers
	developer text not null references Developers (developers) on delete cascade,
	primary key (game_id, developer)
);

create table Game_Publishers ( --same as the above but publishers
	game_id int not null references Games (games_id) on delete cascade,
	publisher text not null references Publishers (publishers) on delete cascade,
	primary key (game_id, publisher)
);

--work in progress for user games relations
create table User_Games ( 
	game_id int not null references Games (games_id) on delete cascade, --store the game id, if game is deleted delete record
	steam_id bigint not null references Profiles (steam_id) on delete cascade, --store user id, if user is deleted delete record
	time_played bigint, --how much time user has played the game
	last_played timestamp with time zone, --last time the user played the game
	last_updated timestamp with time zone default now(), --last time we checked this game and user combo
	primary key (game_id, steam_id) --set a dual primary key
);

create table Status (
	status_code int not null primary key, --status codes between users
	status_name text not null --plain text for our usage
);

--how we are storing user relations
create table User_Relations (
	user1 uuid not null references Profiles (id) on delete cascade, --lower user ID, if account is deleted delete relation
	user2 uuid not null references Profiles (id) on delete cascade, --higher user id
	status int not null references Status (status_code), --status code like one blocked other or friends
	status_since timestamp with time zone default now(), --when the status was updated last
	primary key (user1, user2) -- dual primary key
); --the end
